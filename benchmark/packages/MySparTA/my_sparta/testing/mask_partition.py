import torch
from typing import Tuple, List


def partition(
    mask: torch.Tensor, partition_size: Tuple[int]
) -> List[torch.Tensor]:
    # The input mask is generated by sparta.testing, which is a torch uint8 tensor with 0 and 1 as elements.
    # The partition size stores the dimension length in each dimension.
    # THe output is a list of torch tensors, each of which is a partition of the input mask.
    results = []
    num_partitions = 1
    num_partitions_per_dimension = []
    for i in range(len(partition_size)):
        num_partitions *= mask.shape[i] / partition_size[i]
        num_partitions_per_dimension.append(mask.shape[i] / partition_size[i])

    for idx_partition in range(int(num_partitions)):
        partition = torch.ones(partition_size, dtype=torch.uint8)
        remaining_idx_partition = idx_partition
        element_idxes = []
        for i in reversed(range(len(partition.shape))):
            curr_dim_idx_partition = (
                remaining_idx_partition % partition.shape[i]
            )
            remaining_idx_partition = int(
                remaining_idx_partition / partition.shape[i]
            )
            element_idxes = [
                range(
                    curr_dim_idx_partition * partition.shape[i],
                    (curr_dim_idx_partition + 1) * partition.shape[i],
                )
            ] + element_idxes

        results.append(mask[*element_idxes])

    return results
